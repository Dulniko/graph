import pytest
from utils.huffman import HuffmanCoding


@pytest.mark.parametrize(
    "input_text, codes, encoded, decoded",
    [
        (
            "Ala ma kota a kot ma ale",
            {
                "m": "000",
                "t": "001",
                " ": "01",
                "a": "10",
                "o": "1100",
                "k": "1101",
                "l": "1110",
                "e": "11110",
                "A": "11111",
            },
            "1111111101001000100111011100001100110011101110000101000100110111011110",
            "Ala ma kota a kot ma ale",
        ),
        (
            "Konstantynopolitanczykowianeczka",
            {
                "t": "000",
                "z": "0010",
                "s": "00110",
                "p": "00111",
                "a": "010",
                "k": "0110",
                "K": "01110",
                "l": "01111",
                "y": "1000",
                "e": "10010",
                "w": "10011",
                "c": "1010",
                "i": "1011",
                "o": "110",
                "n": "111",
            },
            "0111011011100110000010111000100011111000111110011111011000010111101000101000011011010011101101011110010101000100110010",
            "Konstantynopolitanczykowianeczka",
        ),
        (
            "abcdefghijklmnopqrstuvwxyz",
            {
                "b": "0000",
                "z": "0001",
                "n": "0010",
                "x": "0011",
                "u": "0100",
                "h": "0101",
                "o": "01100",
                "g": "01101",
                "f": "01110",
                "l": "01111",
                "m": "10000",
                "v": "10001",
                "i": "10010",
                "q": "10011",
                "c": "10100",
                "a": "10101",
                "y": "10110",
                "j": "10111",
                "p": "11000",
                "s": "11001",
                "w": "11010",
                "k": "11011",
                "t": "11100",
                "d": "11101",
                "e": "11110",
                "r": "11111",
            },
            "1010100001010011101111100111001101010110010101111101101111100000010011001100010011111111100111100010010001110100011101100001",
            "abcdefghijklmnopqrstuvwxyz",
        ),
        (
            "Krol jest jeden, krol Sentino",
            {
                "o": "000",
                "s": "0010",
                "i": "00110",
                "S": "00111",
                "n": "010",
                " ": "011",
                "K": "10000",
                "k": "10001",
                "l": "1001",
                "j": "1010",
                ",": "10110",
                "d": "10111",
                "e": "110",
                "r": "1110",
                "t": "1111",
            },
            "100001110000100101110101100010111101110101101011111001010110011100011110000100101100111110010111100110010000",
            "Krol jest jeden, krol Sentino",
        ),
        (
            "nam strzelac nie kazano - wstapilem na dzialo i spojrzalem na pole; 200 armiat grzmialo.",
            {
                "c": "000000",
                "2": "000001",
                "d": "000010",
                "w": "000011",
                "0": "00010",
                ".": "000110",
                "g": "000111",
                ";": "001000",
                "j": "001001",
                "-": "001010",
                "k": "001011",
                "o": "0011",
                "n": "0100",
                "e": "0101",
                "z": "0110",
                "m": "0111",
                "a": "100",
                "t": "10100",
                "s": "10101",
                "l": "1011",
                "i": "1100",
                "p": "11010",
                "r": "11011",
                " ": "111",
            },
            "0100100011111110101101001101101100101101110000000011101001100010111100101110001101000100001111100101011100001110101101001001101011001011010101111110100100111000010011011001001011001111111001111010111010001100100111011011010010110101011111101001001111101000111011010100100011100000100010000101111001101101111100100101001110001111101101100111110010010110011000110",
            "nam strzelac nie kazano - wstapilem na dzialo i spojrzalem na pole; 200 armiat grzmialo.",
        ),
        (
            "AAAAAAAAAAaaaaabbbbbbbbbbbbbbbbbbbbbbbbbBBBcccccccccccccccccccccccccccc",
            {
                "c": "0",
                "B": "1000",
                "a": "1001",
                "A": "101",
                "b": "11",
            },
            "10110110110110110110110110110110011001100110011001111111111111111111111111111111111111111111111111111000100010000000000000000000000000000000",
            "AAAAAAAAAAaaaaabbbbbbbbbbbbbbbbbbbbbbbbbBBBcccccccccccccccccccccccccccc",
        ),
        (
            "ale heca nie ma mnie, ale ale ale ale co",
            {
                "e": "00",
                " ": "01",
                "c": "1000",
                "m": "1001",
                "l": "101",
                ",": "11000",
                "n": "11001",
                "o": "110100",
                "h": "110101",
                "i": "11011",
                "a": "111",
            },
            "111101000111010100100011101110011101100011001111011001110011101100110000111110100011111010001111101000111110100011000110100",
            "ale heca nie ma mnie, ale ale ale ale co",
        ),
        # TODO: Add more test cases
    ],
)
def test_huffman(input_text, codes, encoded, decoded):
    text = input_text
    huffman = HuffmanCoding(text)
    assert codes == huffman.codes
    assert encoded == huffman.encode_text()
    assert decoded == huffman.decode_text(huffman.encode_text())
